# Workflow usando cloudbuild.yaml (como el proyecto exitoso de tu amigo)
name: CI/CD Pipeline para Hello-World FastAPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies for linting
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        pip install -r requirements.txt
        
    - name: Run Flake8 linter
      run: |
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with Black
      run: |
        black --check .
        
    - name: Check import order with Isort
      run: |
        isort --check-only --profile black .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run Pytest tests
      run: |
        pytest

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    needs: test
    runs-on: ubuntu-latest
    environment: ci-cd 
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v3
    
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.SA_MLCATALOGDEV }}' 
    
    - name: 'Set up Google Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: crp-dev-dig-mlcatalog 
        
    # Usar cloudbuild.yaml como el proyecto exitoso de tu amigo
    - name: 'Build and Deploy with cloudbuild.yaml (como tu amigo)'
      run: |
        set -e 
        
        # Obtener SHORT_SHA para versioning
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        echo "Using cloudbuild.yaml approach (same as your friend's working project)"
        echo "Building and deploying with SHORT_SHA: $SHORT_SHA"
        
        # Usar gcloud builds submit con cloudbuild.yaml (NO con --tag)
        # Esto es exactamente como funciona el proyecto de tu amigo
        gcloud builds submit . \
          --config=cloudbuild.yaml \
          --substitutions=SHORT_SHA=$SHORT_SHA \
          --project=crp-dev-dig-mlcatalog \
          --timeout=10m
        
        echo "Build and deploy completed successfully using cloudbuild.yaml!"
