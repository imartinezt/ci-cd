# Workflow con Cloud Build mejorado
name: CI/CD Pipeline para Hello-World FastAPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies for linting
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        pip install -r requirements.txt
        
    - name: Run Flake8 linter
      run: |
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with Black
      run: |
        black --check .
        
    - name: Check import order with Isort
      run: |
        isort --check-only --profile black .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run Pytest tests
      run: |
        pytest

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    needs: test
    runs-on: ubuntu-latest
    environment: ci-cd 
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v3
    
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.SA_MLCATALOGDEV }}' 
    
    - name: 'Set up Google Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: crp-dev-dig-mlcatalog 
        
    # Paso mejorado para Cloud Build
    - name: 'Build and Push Image with Cloud Build'
      run: |
        set -e 
        
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        IMAGE_NAME="hello-world-fastapi"
        PROJECT_ID="crp-dev-dig-mlcatalog"
        REGION="us-central1"
        REGISTRY_NAME="cicd"
        
        IMAGE_FULL_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REGISTRY_NAME}/${IMAGE_NAME}"
        TAG_VERSION="${IMAGE_FULL_PATH}:${SHORT_SHA}"
        TAG_LATEST="${IMAGE_FULL_PATH}:latest"
        
        echo "Starting Cloud Build..."
        
        # Usar Cloud Build con async para evitar problemas de streaming de logs
        BUILD_ID=$(gcloud builds submit . \
          --tag=$TAG_VERSION \
          --tag=$TAG_LATEST \
          --project=$PROJECT_ID \
          --timeout=10m \
          --async \
          --format="value(id)")
        
        echo "Build submitted with ID: $BUILD_ID"
        
        # Esperar a que termine el build y obtener el estado
        echo "Waiting for build to complete..."
        gcloud builds wait $BUILD_ID --project=$PROJECT_ID
        
        # Verificar el estado final
        BUILD_STATUS=$(gcloud builds describe $BUILD_ID --project=$PROJECT_ID --format="value(status)")
        echo "Build status: $BUILD_STATUS"
        
        if [ "$BUILD_STATUS" != "SUCCESS" ]; then
          echo "Build failed with status: $BUILD_STATUS"
          # Obtener logs del build si fallÃ³
          gcloud builds log $BUILD_ID --project=$PROJECT_ID || true
          exit 1
        fi
        
        echo "Build completed successfully!"
        echo "IMAGE_TAG=$TAG_VERSION" >> $GITHUB_ENV
    
    - name: 'Deploy to Cloud Run'
      run: |
        set -e 
        
        SERVICE_NAME="fastapi-hello-world-service"
        PROJECT_ID="crp-dev-dig-mlcatalog"
        REGION="us-central1"
        
        echo "Deploying service $SERVICE_NAME with image ${{ env.IMAGE_TAG }} to Cloud Run in $REGION..."
        
        gcloud run deploy $SERVICE_NAME \
          --image=${{ env.IMAGE_TAG }} \
          --region=$REGION \
          --platform=managed \
          --port=9819 \
          --cpu=4 \
          --memory=16Gi \
          --min-instances=1 \
          --max-instances=50 \
          --timeout=3600s \
          --concurrency=80 \
          --execution-environment=gen2 \
          --project=$PROJECT_ID \
          --no-allow-unauthenticated
        
        echo "Deployed version ${{ env.IMAGE_TAG }} to $SERVICE_NAME"
